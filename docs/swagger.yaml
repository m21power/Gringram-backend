basePath: /api/v1
definitions:
  domain.LoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  domain.User:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      image_url:
        description: optional
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  types.UserPayload:
    properties:
      bio:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  utils.DeleteResponse:
    properties:
      message:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error: {}
    type: object
  utils.SuccessReponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API documentation for GrinGram.
  title: GrinGram API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token in a cookie
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/domain.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessReponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User login
      tags:
      - Login/Signup
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.UserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new user
      tags:
      - Login/Signup
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by their user ID, only admins can access it
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a user by user ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the user's profile information including password and profile
        picture.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.UserPayload'
      - description: Profile picture URL
        in: query
        name: image_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated user information
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a user's profile
      tags:
      - Users
  /users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their user ID, only admins or the user themselves
        can delete their account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DeleteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a user
      tags:
      - Users
  /users/email:
    get:
      description: Retrieve a user by their email address from the database.
      parameters:
      - description: User Email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get user by email
      tags:
      - Users
  /users/image/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the user's profile image from the cloud and the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.DeleteResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete user profile image
      tags:
      - Users
  /users/logout:
    post:
      consumes:
      - application/json
      description: Delete token from a cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessReponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User logout
      tags:
      - Login/Signup
  /users/me:
    get:
      description: Retrieves the information of the currently authenticated user based
        on the provided token.
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get current user information
      tags:
      - Users
  /users/username:
    get:
      description: Retrieve a user by their username from the database.
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get user by username
      tags:
      - Users
swagger: "2.0"
